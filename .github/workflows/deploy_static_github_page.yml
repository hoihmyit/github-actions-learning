# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: gitHub-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: '.'
      - name: Deploy to GitHub Pages
        id: Deployment
        uses: actions/deploy-pages@v4

  check-deployment:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      # Install curl for checking the status
      - name: Install curl
        run: sudo apt-get install -y curl

      # Define GitHub Pages URL (replace <username> and <repository> accordingly)
      - name: Define GitHub Pages URL
        id: define_url
        run: |
          echo "::set-output name=pages_url::https://hoihmyit.github.io/github-actions-learning/"
      
      # Check GitHub Pages status by making an HTTP request
      # curl: A command-line tool used to send HTTP requests to a URL.
      # -o /dev/null: Redirects the output to /dev/null. This is useful when you only care about the status code and not the actual response content.
      # -s: Silent mode. Prevents curl from showing the progress meter or error messages.
      # -w "%{http_code}": Prints the HTTP status code of the response.
      # ${{ steps.define_url.outputs.pages_url }}: The URL of the GitHub Pages site.
      - name: Check GitHub Pages status
        run: |
          status=$(curl -o /dev/null -s -w "%{http_code}" ${{ steps.define_url.outputs.pages_url }})
          if [ "$status" == "200" ]; then
            echo "GitHub Pages is deployed and accessible."
          else
            echo "GitHub Pages is not accessible. HTTP status code: $status"
            exit 1
          fi
